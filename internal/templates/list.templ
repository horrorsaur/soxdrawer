package templates

import "soxdrawer/internal/store"
import "fmt"
import "strings"
import "context"
import "io"

templ ListPage(objects []*store.ObjectInfo) {
	<div class="bg-white rounded-lg shadow-md p-8 mb-8">
		<h1 class="text-3xl font-bold mb-6">Stored Objects</h1>
		if len(objects) == 0 {
			<p class="text-gray-600">No objects found.</p>
		} else {
			<div class="overflow-x-auto">
				<table class="w-full border-collapse">
					<thead>
						<tr class="bg-gray-50">
							<th class="p-3 text-left border-b-2 border-gray-200 font-semibold">Type</th>
							<th class="p-3 text-left border-b-2 border-gray-200 font-semibold">Name</th>
							<th class="p-3 text-left border-b-2 border-gray-200 font-semibold">Size</th>
							<th class="p-3 text-left border-b-2 border-gray-200 font-semibold">Modified</th>
							<th class="p-3 text-left border-b-2 border-gray-200 font-semibold">Actions</th>
						</tr>
					</thead>
					<tbody>
						for _, obj := range objects {
							<tr class="border-b border-gray-200 hover:bg-gray-50">
								<td class="p-3">
									{ getContentTypeIcon(obj.Name) }
								</td>
								<td class="p-3">
									<div class="flex items-center space-x-2">
										<span class="font-medium">{ obj.Name }</span>
										{ getContentTypeBadge(obj.Name) }
									</div>
								</td>
								<td class="p-3">{ fmt.Sprintf("%d bytes", obj.Size) }</td>
								<td class="p-3">{ obj.Created.Format("2006-01-02 15:04:05") }</td>
								<td class="p-3">
									<div class="flex space-x-2">
										{ getPreviewButton(obj.Name) }
										<a
											href={ templ.URL("/download/" + obj.Name) }
											class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded transition-colors"
										>Download</a>
										<button
											class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded transition-colors"
											hx-delete={ "/delete/" + obj.Name }
											hx-confirm={ "Are you sure you want to delete \"" + obj.Name + "\"?" }
											hx-target="body"
											hx-swap="outerHTML"
										>Delete</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
		<div class="mt-6">
			<a href="/" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition-colors no-underline">Upload More Content</a>
		</div>
	</div>

	<!-- Preview Modal -->
	<div id="previewModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
		<div class="flex items-center justify-center min-h-screen p-4">
			<div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-96 overflow-hidden">
				<div class="flex items-center justify-between p-4 border-b">
					<h3 class="text-lg font-semibold" id="previewTitle">Preview</h3>
					<button onclick="closePreview()" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
				</div>
				<div class="p-4 overflow-auto max-h-80" id="previewContent">
					<!-- Content will be loaded here -->
				</div>
			</div>
		</div>
	</div>

	<script>
		function showPreview(key) {
			const modal = document.getElementById('previewModal');
			const title = document.getElementById('previewTitle');
			const content = document.getElementById('previewContent');
			
			title.textContent = `Preview: ${key}`;
			content.innerHTML = '<div class="text-center"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div><p class="mt-2">Loading...</p></div>';
			modal.classList.remove('hidden');
			
			// Fetch the content
			fetch(`/preview/${encodeURIComponent(key)}`)
				.then(response => response.text())
				.then(data => {
					content.innerHTML = `<pre class="whitespace-pre-wrap text-sm">${data}</pre>`;
				})
				.catch(error => {
					content.innerHTML = `<div class="text-red-600">Error loading preview: ${error.message}</div>`;
				});
		}
		
		function closePreview() {
			document.getElementById('previewModal').classList.add('hidden');
		}
		
		// Close modal when clicking outside
		document.getElementById('previewModal').addEventListener('click', function(e) {
			if (e.target === this) {
				closePreview();
			}
		});
	</script>
}

func getContentTypeIcon(name string) templ.Component {
	if strings.HasSuffix(name, ".txt") {
		if strings.Contains(name, "url") {
			return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
				_, err := fmt.Fprintf(w, `<span class="text-2xl">üîó</span>`)
				return err
			})
		} else {
			return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
				_, err := fmt.Fprintf(w, `<span class="text-2xl">üìù</span>`)
				return err
			})
		}
	} else if strings.HasSuffix(name, ".jpg") || strings.HasSuffix(name, ".jpeg") || strings.HasSuffix(name, ".png") || strings.HasSuffix(name, ".gif") || strings.HasSuffix(name, ".webp") {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<span class="text-2xl">üñºÔ∏è</span>`)
			return err
		})
	} else {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<span class="text-2xl">üìÑ</span>`)
			return err
		})
	}
}

func getContentTypeBadge(name string) templ.Component {
	if strings.HasSuffix(name, ".txt") {
		if strings.Contains(name, "url") {
			return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
				_, err := fmt.Fprintf(w, `<span class="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded">URL</span>`)
				return err
			})
		} else {
			return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
				_, err := fmt.Fprintf(w, `<span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded">Text</span>`)
				return err
			})
		}
	} else if strings.HasSuffix(name, ".jpg") || strings.HasSuffix(name, ".jpeg") || strings.HasSuffix(name, ".png") || strings.HasSuffix(name, ".gif") || strings.HasSuffix(name, ".webp") {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<span class="bg-purple-100 text-purple-800 text-xs font-medium px-2 py-1 rounded">Image</span>`)
			return err
		})
	} else {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<span class="bg-gray-100 text-gray-800 text-xs font-medium px-2 py-1 rounded">File</span>`)
			return err
		})
	}
}

func getPreviewButton(name string) templ.Component {
	if strings.HasSuffix(name, ".txt") {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<button onclick="showPreview('%s')" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded transition-colors">Preview</button>`, name)
			return err
		})
	} else {
		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			_, err := fmt.Fprintf(w, `<button disabled class="bg-gray-300 text-gray-500 font-medium py-2 px-4 rounded cursor-not-allowed">Preview</button>`)
			return err
		})
	}
}
