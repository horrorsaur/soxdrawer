package templates

templ HomePage() {
	<div class="bg-white rounded-lg shadow-sm border p-8 max-w-2xl mx-auto">
		<div class="text-center mb-8">
			<h1 class="text-2xl font-semibold text-gray-900 mb-2">File Upload</h1>
			<p class="text-gray-600">Drag and drop files or click to browse</p>
		</div>
		
		<div 
			class="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center cursor-pointer transition-all hover:border-blue-400 hover:bg-blue-50 hover:shadow-md group min-h-[200px] flex flex-col items-center justify-center" 
			id="dropZone"
			hx-post="/upload"
			hx-encoding="multipart/form-data"
			hx-target="#uploadResults"
			hx-indicator="#uploadIndicator"
		>
			<div class="text-5xl text-gray-400 group-hover:text-blue-500 transition-colors mb-4">üìÅ</div>
			<div class="text-lg font-medium text-gray-700 mb-2">Drop files here or click to browse</div>
			<div class="text-sm text-gray-500">Support for all file types ‚Ä¢ Max 32MB per file</div>
			<input type="file" name="file" id="fileInput" class="hidden" multiple/>
		</div>

		<div id="uploadIndicator" class="htmx-indicator text-center mt-6">
			<div class="inline-block w-5 h-5 border-2 border-gray-300 border-t-blue-500 rounded-full animate-spin"></div>
			<span class="ml-2 text-gray-600">Uploading...</span>
		</div>

		<div id="uploadResults" class="mt-6"></div>

		<div id="selectedFiles" class="mt-8 hidden">
			<h3 class="text-lg font-medium text-gray-900 mb-4">Selected Files</h3>
			<div id="fileListContainer" class="space-y-3"></div>
		</div>
	</div>

	<script>
		const dropZone = document.getElementById('dropZone');
		const fileInput = document.getElementById('fileInput');
		const selectedFilesDiv = document.getElementById('selectedFiles');
		const fileListContainer = document.getElementById('fileListContainer');
		const uploadResults = document.getElementById('uploadResults');

		// Click to browse files
		dropZone.addEventListener('click', () => {
			fileInput.click();
		});

		// Handle file selection via input
		fileInput.addEventListener('change', (e) => {
			handleFiles(e.target.files);
		});

		// Drag and drop handlers
		dropZone.addEventListener('dragover', (e) => {
			e.preventDefault();
			dropZone.classList.add('border-green-400', 'bg-green-50');
			dropZone.classList.remove('border-gray-300');
		});

		dropZone.addEventListener('dragleave', (e) => {
			e.preventDefault();
			dropZone.classList.remove('border-green-400', 'bg-green-50');
			dropZone.classList.add('border-gray-300');
		});

		dropZone.addEventListener('drop', (e) => {
			e.preventDefault();
			dropZone.classList.remove('border-green-400', 'bg-green-50');
			dropZone.classList.add('border-gray-300');
			handleFiles(e.dataTransfer.files);
		});

		function handleFiles(files) {
			if (files.length === 0) return;

			// Show selected files
			displaySelectedFiles(files);

			// Upload files one by one using HTMX
			uploadFilesSequentially(files);
		}

		function displaySelectedFiles(files) {
			fileListContainer.innerHTML = '';
			selectedFilesDiv.classList.remove('hidden');

			Array.from(files).forEach((file, index) => {
				const fileItem = document.createElement('div');
				fileItem.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg border';
				fileItem.innerHTML = `
					<div class="flex items-center">
						<span class="text-2xl mr-3 text-blue-500">üìÑ</span>
						<div>
							<div class="font-medium text-gray-900">${file.name}</div>
							<div class="text-sm text-gray-500">${formatFileSize(file.size)}</div>
						</div>
					</div>
					<div id="status-${index}" class="text-gray-600 text-sm">Ready</div>
				`;
				fileListContainer.appendChild(fileItem);
			});
		}

		async function uploadFilesSequentially(files) {
			uploadResults.innerHTML = '';
			
			for (let i = 0; i < files.length; i++) {
				const file = files[i];
				const statusEl = document.getElementById(`status-${i}`);
				
				try {
					statusEl.innerHTML = '<div class="inline-block w-4 h-4 border-2 border-gray-300 border-t-blue-500 rounded-full animate-spin"></div>';
					
					const formData = new FormData();
					formData.append('file', file);
					
					const response = await fetch('/upload', {
						method: 'POST',
						body: formData
					});
					
					const data = await response.json();
					
					if (data.status === 'success') {
						statusEl.innerHTML = '<span class="text-green-600 font-medium">‚úì Uploaded</span>';
						
						// Add success message to results
						const successDiv = document.createElement('div');
						successDiv.className = 'bg-green-50 border border-green-200 text-green-700 p-4 rounded-lg mb-3';
						successDiv.innerHTML = `
							<div class="font-medium">Success!</div>
							<div class="text-sm mt-1">
								File: ${data.filename}<br>
								Key: ${data.key}<br>
								Size: ${data.size} bytes
							</div>
						`;
						uploadResults.appendChild(successDiv);
					} else {
						statusEl.innerHTML = '<span class="text-red-600 font-medium">‚úó Failed</span>';
						
						// Add error message to results
						const errorDiv = document.createElement('div');
						errorDiv.className = 'bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-3';
						errorDiv.innerHTML = `<div class="font-medium">Error:</div><div class="text-sm mt-1">${data.message}</div>`;
						uploadResults.appendChild(errorDiv);
					}
				} catch (error) {
					statusEl.innerHTML = '<span class="text-red-600 font-medium">‚úó Error</span>';
					
					const errorDiv = document.createElement('div');
					errorDiv.className = 'bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-3';
					errorDiv.innerHTML = `<div class="font-medium">Error:</div><div class="text-sm mt-1">${error.message}</div>`;
					uploadResults.appendChild(errorDiv);
				}
			}
		}

		function formatFileSize(bytes) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}
	</script>
}
