package templates

templ HomePage() {
	<div class="card">
		<h1>Welcome to SoxDrawer</h1>
		<p>Drag and drop files here or click to select files for upload to your NATS-powered object storage.</p>
		
		<div 
			class="drop-zone" 
			id="dropZone"
			hx-post="/upload"
			hx-encoding="multipart/form-data"
			hx-target="#uploadResults"
			hx-indicator="#uploadIndicator"
		>
			<div class="drop-zone-icon">üìÅ</div>
			<div class="drop-zone-text">Drop files here or click to browse</div>
			<div class="drop-zone-subtext">Support for all file types ‚Ä¢ Max 32MB per file</div>
			<input type="file" name="file" id="fileInput" style="display: none;" multiple/>
			<div class="upload-progress" id="uploadProgress">
				<div class="upload-progress-bar" id="progressBar"></div>
			</div>
		</div>

		<div id="uploadIndicator" class="htmx-indicator" style="text-align: center; margin-top: 1rem;">
			<div class="spinner"></div>
			<span style="margin-left: 0.5rem;">Uploading...</span>
		</div>

		<div id="uploadResults"></div>

		<div class="file-list" id="selectedFiles" style="display: none;">
			<h3>Selected Files</h3>
			<div id="fileListContainer"></div>
		</div>
	</div>

	<script>
		const dropZone = document.getElementById('dropZone');
		const fileInput = document.getElementById('fileInput');
		const selectedFilesDiv = document.getElementById('selectedFiles');
		const fileListContainer = document.getElementById('fileListContainer');
		const uploadResults = document.getElementById('uploadResults');

		// Click to browse files
		dropZone.addEventListener('click', () => {
			fileInput.click();
		});

		// Handle file selection via input
		fileInput.addEventListener('change', (e) => {
			handleFiles(e.target.files);
		});

		// Drag and drop handlers
		dropZone.addEventListener('dragover', (e) => {
			e.preventDefault();
			dropZone.classList.add('dragover');
		});

		dropZone.addEventListener('dragleave', (e) => {
			e.preventDefault();
			dropZone.classList.remove('dragover');
		});

		dropZone.addEventListener('drop', (e) => {
			e.preventDefault();
			dropZone.classList.remove('dragover');
			handleFiles(e.dataTransfer.files);
		});

		function handleFiles(files) {
			if (files.length === 0) return;

			// Show selected files
			displaySelectedFiles(files);

			// Upload files one by one using HTMX
			uploadFilesSequentially(files);
		}

		function displaySelectedFiles(files) {
			fileListContainer.innerHTML = '';
			selectedFilesDiv.style.display = 'block';

			Array.from(files).forEach((file, index) => {
				const fileItem = document.createElement('div');
				fileItem.className = 'file-item';
				fileItem.innerHTML = `
					<div class="file-info">
						<span class="file-icon">üìÑ</span>
						<div>
							<div style="font-weight: 600;">${file.name}</div>
							<div style="font-size: 0.9rem; color: #666;">${formatFileSize(file.size)}</div>
						</div>
					</div>
					<div id="status-${index}" style="color: #666;">Ready</div>
				`;
				fileListContainer.appendChild(fileItem);
			});
		}

		async function uploadFilesSequentially(files) {
			uploadResults.innerHTML = '';
			
			for (let i = 0; i < files.length; i++) {
				const file = files[i];
				const statusEl = document.getElementById(`status-${i}`);
				
				try {
					statusEl.innerHTML = '<div class="spinner" style="width: 16px; height: 16px;"></div>';
					
					const formData = new FormData();
					formData.append('file', file);
					
					const response = await fetch('/upload', {
						method: 'POST',
						body: formData
					});
					
					const data = await response.json();
					
					if (data.status === 'success') {
						statusEl.innerHTML = '<span style="color: #28a745;">‚úì Uploaded</span>';
						
						// Add success message to results
						const successDiv = document.createElement('div');
						successDiv.className = 'result success';
						successDiv.innerHTML = `
							<strong>Success!</strong><br>
							File: ${data.filename}<br>
							Key: ${data.key}<br>
							Size: ${data.size} bytes
						`;
						uploadResults.appendChild(successDiv);
					} else {
						statusEl.innerHTML = '<span style="color: #dc3545;">‚úó Failed</span>';
						
						// Add error message to results
						const errorDiv = document.createElement('div');
						errorDiv.className = 'result error';
						errorDiv.innerHTML = `<strong>Error:</strong> ${data.message}`;
						uploadResults.appendChild(errorDiv);
					}
				} catch (error) {
					statusEl.innerHTML = '<span style="color: #dc3545;">‚úó Error</span>';
					
					const errorDiv = document.createElement('div');
					errorDiv.className = 'result error';
					errorDiv.innerHTML = `<strong>Error:</strong> ${error.message}`;
					uploadResults.appendChild(errorDiv);
				}
			}
		}

		function formatFileSize(bytes) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}
	</script>
}
