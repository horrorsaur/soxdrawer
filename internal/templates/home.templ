package templates

templ HomePage() {
	<div class="bg-white rounded-lg shadow-md p-8 mb-8">
		<h1 class="text-3xl font-bold mb-4">Welcome to SoxDrawer</h1>
		<p class="text-gray-600 mb-6">A NATS-powered object storage service that allows you to upload, store, and retrieve files efficiently.</p>
		
		<!-- Drag and Drop Zone -->
		<div 
			id="dropZone"
			class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-colors hover:border-blue-400 hover:bg-blue-50"
			hx-post="/upload"
			hx-encoding="multipart/form-data"
			hx-target="#result"
			hx-swap="innerHTML"
		>
			<div class="space-y-4">
				<div class="text-6xl text-gray-400 mb-4">📁</div>
				<h2 class="text-2xl font-semibold text-gray-700">Drag & Drop Here</h2>
				<p class="text-gray-500">Drop files, text, images, or URLs to upload</p>
				<div class="flex justify-center space-x-4 text-sm text-gray-400">
					<span>📄 Files</span>
					<span>📝 Text</span>
					<span>🖼️ Images</span>
					<span>🔗 URLs</span>
				</div>
				<p class="text-sm text-gray-400">or</p>
				<button 
					type="button"
					onclick="document.getElementById('fileInput').click()"
					class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition-colors"
				>
					Choose Files
				</button>
			</div>
		</div>

		<!-- Hidden file input for traditional file selection -->
		<input 
			id="fileInput"
			type="file" 
			multiple
			class="hidden"
			onchange="handleFileSelect(event)"
		/>

		<!-- Result area -->
		<div id="result" class="mt-6"></div>
	</div>

	<script>
		const dropZone = document.getElementById('dropZone');
		const fileInput = document.getElementById('fileInput');

		// Prevent default drag behaviors
		['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
			dropZone.addEventListener(eventName, preventDefaults, false);
			document.body.addEventListener(eventName, preventDefaults, false);
		});

		// Highlight drop zone when item is dragged over it
		['dragenter', 'dragover'].forEach(eventName => {
			dropZone.addEventListener(eventName, highlight, false);
		});

		['dragleave', 'drop'].forEach(eventName => {
			dropZone.addEventListener(eventName, unhighlight, false);
		});

		// Handle dropped items
		dropZone.addEventListener('drop', handleDrop, false);

		function preventDefaults(e) {
			e.preventDefault();
			e.stopPropagation();
		}

		function highlight(e) {
			dropZone.classList.add('border-blue-500', 'bg-blue-50');
			dropZone.querySelector('.text-6xl').textContent = '📤';
		}

		function unhighlight(e) {
			dropZone.classList.remove('border-blue-500', 'bg-blue-50');
			dropZone.querySelector('.text-6xl').textContent = '📁';
		}

		function handleDrop(e) {
			const items = e.dataTransfer.items;
			const files = e.dataTransfer.files;
			
			// Show loading state
			showLoading();

			// Handle different types of dropped content
			if (items) {
				// Handle items (text, URLs, files)
				for (let i = 0; i < items.length; i++) {
					const item = items[i];
					
					if (item.kind === 'file') {
						// Handle files
						const file = files[i];
						uploadFile(file);
					} else if (item.kind === 'string') {
						// Handle text/URLs
						item.getAsString(function(string) {
							handleTextContent(string);
						});
					}
				}
			} else if (files.length > 0) {
				// Handle files only
				for (let i = 0; i < files.length; i++) {
					uploadFile(files[i]);
				}
			}
		}

		function handleFileSelect(e) {
			const files = e.target.files;
			showLoading();
			
			for (let i = 0; i < files.length; i++) {
				uploadFile(files[i]);
			}
		}

		function handleTextContent(content) {
			// Check if it's a URL
			if (isValidUrl(content)) {
				uploadUrl(content);
			} else {
				uploadText(content);
			}
		}

		function isValidUrl(string) {
			try {
				new URL(string);
				return true;
			} catch (_) {
				return false;
			}
		}

		function uploadFile(file) {
			const formData = new FormData();
			formData.append('file', file);
			formData.append('type', 'file');

			// Show file-specific loading message
			const fileType = getFileType(file);
			showFileLoading(file.name, fileType);

			fetch('/upload', {
				method: 'POST',
				body: formData
			})
			.then(response => response.text())
			.then(html => {
				document.getElementById('result').innerHTML = html;
			})
			.catch(error => {
				showError('Upload failed: ' + error.message);
			});
		}

		function uploadText(text) {
			const formData = new FormData();
			const blob = new Blob([text], { type: 'text/plain' });
			formData.append('file', blob, 'text.txt');
			formData.append('type', 'text');

			showTextLoading(text.substring(0, 50) + (text.length > 50 ? '...' : ''));

			fetch('/upload', {
				method: 'POST',
				body: formData
			})
			.then(response => response.text())
			.then(html => {
				document.getElementById('result').innerHTML = html;
			})
			.catch(error => {
				showError('Upload failed: ' + error.message);
			});
		}

		function uploadUrl(url) {
			const formData = new FormData();
			const blob = new Blob([url], { type: 'text/plain' });
			formData.append('file', blob, 'url.txt');
			formData.append('type', 'url');

			showUrlLoading(url);

			fetch('/upload', {
				method: 'POST',
				body: formData
			})
			.then(response => response.text())
			.then(html => {
				document.getElementById('result').innerHTML = html;
			})
			.catch(error => {
				showError('Upload failed: ' + error.message);
			});
		}

		function getFileType(file) {
			if (file.type.startsWith('image/')) return 'image';
			if (file.type.startsWith('text/')) return 'text';
			if (file.type.startsWith('video/')) return 'video';
			if (file.type.startsWith('audio/')) return 'audio';
			return 'file';
		}

		function showLoading() {
			document.getElementById('result').innerHTML = `
				<div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4">
					<div class="flex items-center">
						<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
						<strong>Processing...</strong> Please wait while your content is being uploaded.
					</div>
				</div>
			`;
		}

		function showFileLoading(filename, fileType) {
			const icons = {
				image: '🖼️',
				text: '📝',
				video: '🎥',
				audio: '🎵',
				file: '📄'
			};
			const icon = icons[fileType] || '📄';
			
			document.getElementById('result').innerHTML = `
				<div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4">
					<div class="flex items-center">
						<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
						<strong>Uploading ${icon} ${filename}...</strong>
					</div>
				</div>
			`;
		}

		function showTextLoading(preview) {
			document.getElementById('result').innerHTML = `
				<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
					<div class="flex items-center">
						<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600 mr-2"></div>
						<strong>Saving text content...</strong>
						<div class="ml-2 text-sm opacity-75">"${preview}"</div>
					</div>
				</div>
			`;
		}

		function showUrlLoading(url) {
			document.getElementById('result').innerHTML = `
				<div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4">
					<div class="flex items-center">
						<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
						<strong>Saving URL...</strong>
						<div class="ml-2 text-sm opacity-75">${url}</div>
					</div>
				</div>
			`;
		}

		function showError(message) {
			document.getElementById('result').innerHTML = `
				<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
					<strong>Error:</strong> ${message}
				</div>
			`;
		}
	</script>
}
